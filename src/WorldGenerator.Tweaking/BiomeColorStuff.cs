// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var biomeColors = BiomeColors.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BiomeColors
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("colorMap")]
        public ColorMapElement[][] ColorMap { get; set; }
    }

    public partial class ColorMapClass
    {
        [JsonProperty("r")]
        public int R { get; set; }

        [JsonProperty("g")]
        public int G { get; set; }

        [JsonProperty("b")]
        public int B { get; set; }
    }

    public partial struct ColorMapElement
    {
        public ColorMapClass ColorMapClass;
        public int? Integer;

        public static implicit operator ColorMapElement(ColorMapClass ColorMapClass) => new ColorMapElement { ColorMapClass = ColorMapClass };
        public static implicit operator ColorMapElement(int Integer) => new ColorMapElement { Integer = Integer };
    }

    public partial class BiomeColors
    {
        public static BiomeColors FromJson(string json) => JsonConvert.DeserializeObject<BiomeColors>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BiomeColors self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ColorMapElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ColorMapElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ColorMapElement) || t == typeof(ColorMapElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<int>(reader);
                    return new ColorMapElement { Integer = integerValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ColorMapClass>(reader);
                    return new ColorMapElement { ColorMapClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ColorMapElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ColorMapElement)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.ColorMapClass != null)
            {
                serializer.Serialize(writer, value.ColorMapClass);
                return;
            }
            throw new Exception("Cannot marshal type ColorMapElement");
        }

        public static readonly ColorMapElementConverter Singleton = new ColorMapElementConverter();
    }
}
